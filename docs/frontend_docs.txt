What is Routes and Route in React?
React Router is a library used for handling navigation in React applications. It enables single-page applications (SPAs) to have different views without requiring a full-page reload.

Routes: It is a wrapper that contains multiple Route components. It tells React Router that we are defining multiple routes inside it.
Route: It defines a specific path (path='') and what component (element={<Component />}) should be rendered when the user visits that path.

=======================================================================

âœ” BrowserRouter is required to enable routing in React.
âœ” It tracks the URL and renders the correct component.
âœ” Always wrap your <App /> component with <BrowserRouter> in index.js.
âœ” Use <Routes> and <Route> inside BrowserRouter to define different paths.

Why is BrowserRouter Necessary?
Enables Single-Page Application (SPA) Routing

React doesnâ€™t reload the page when switching routes. It updates only the necessary part of the UI.
Keeps URL in Sync with UI

React Router updates the browserâ€™s address bar (/home, /about, etc.) while displaying the correct component.
Handles History and Navigation

It allows users to go back and forward using the browserâ€™s navigation buttons.

======================================================================

in axios.js

we create a custom axios called "axiosInstance" the benefit is that now we export this function 
and when we use 

axiosInstance.get("short-url");

instead of the long URL "http://localhost:5001/api/auth/check"

=======================================================================

2 ways to set states :
    set((state)=>({...state, authUser:res.data}))
    set({authUser:null})

=======================================================================

In ProfilePage.jsx component

const handleImageUpload = async (e) => {
  const file = e.target.files[0];           // Get the first selected file
  if (!file) return;                        // If no file is selected, do nothing

  const reader = new FileReader();          // Create a FileReader instance
  reader.readAsDataURL(file);               // Convert the file to a Base64-encoded string

  reader.onload = async () => {             // When reading is complete
    const base64Image = reader.result;       // Get the Base64 string
    await updateProfile({ profilePic: base64Image });  // Update the profile with the image
  };
};

----------------------------------------------------------------------------
The FileReader API is a built-in JavaScript object that allows web applications to read file contents asynchronously. It's mainly used for processing files selected by the user (like images, PDFs, or text files).

The readAsDataURL() method converts the file into a Base64-encoded string (which is a long text representation of the file).
This is useful when uploading images because Base64 can be stored in a database or sent in an API request.
once the file is successfully read, reader.result holds the Base64 string

When calling:
reader.readAsDataURL(file);

the file does not get read immediately. Instead, the browser reads the file asynchronously (in the background), and when it's done, it triggers the onload event.

.onload is a property like onChange, onClick that stores a function.
ðŸ”¹ It gets triggered automatically when the file reading is done.
ðŸ”¹ You cannot call it manually like a method().

Event	              Fires when...	                         Useful for
onload	            File read successfully	               Handling read result
onloadend	          File read is done (success or error)	 Cleanup, final actions

Thus, we define reader.onload to specify what should happen when the reading is complete.

=========================================================================================================

 Why use get() inside a Zustand store?
    Even within the same store, if you're trying to access the state inside another function, you need to use get() because:

    The store setup is just a function.

    set, get, and sometimes api are passed into that function by Zustand when it initializes the store.

    get() gives you the latest snapshot of the state.
================================================================================

ERROR:

Problem                                      | Fix
You imported backend socket.js into frontend | Only use socket.io-client on frontend
Buffer not available in browser              | Caused by backend-only                                   packages or code running in frontend
io in server and io in client are 
different things                             | Use socket.io on server and socket.                                        io-client on frontend

ðŸŽ¯ Why subscribeToMessages is necessary:
Otherwise, you won't see your friend's new messages live.

Without it, you'd have to keep refreshing manually (by calling getMessages again) â€” which sucks.

Your thinking is right â€” on a surface level it looks like both are updating messages.
But the key difference is:

getMessages / sendMessage = Request-Response (HTTP) 
subscribeToMessages = Real-Time Push (WebSocket)